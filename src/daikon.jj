/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. daikon.jj */
/*@egen*/
options
{
  IGNORE_CASE = false;
             
                 
  STATIC = false;
}


PARSER_BEGIN(daikon)

class daikon/*@bgen(jjtree)*/implements daikonTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTdaikonState jjtree = new JJTdaikonState();

/*@egen*/
  public static void main(String args[]) {
	if (args.length < 1) {
      System.out.println("Please pass in the filename.");
      System.exit(1);
      }
    
    daikon daikonParser = new daikon(new FileInputStream(args[0]));
    try {
      SimpleNode root = daikonParser.Start();
      n.dump("");
    } catch (Exception e) {
      System.out.println("Something went wrong. Failing.");
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
  }
}

PARSER_END(daikon)


SKIP :
{
  " "
| "\t"
}

TOKEN:
{
  <NEWLINE: "\n">
| <LPAREN: "(">
| <RPAREN: ")">
| <LBRAC: "{">
| <RBRAC: "}">
| <RELATIONALOP: "==" | "!=" | ">=" | "<" | ">" | "=< " | "||">
| <MATH_OP: "+" | "-" | "*" | "/">
| <PERIOD: ".">
| <COMMA: ",">
| <TEMPORALOP: "\\old" | "\\new">
| <THIS :"this.">
| <#LETTER: ["a"-"z","A"-"Z"] >
| <#DIGIT: ["0"-"9"]>
| <IDENTIFIER: <LETTER> ( <LETTER> | <DIGIT> | "_")* >
| <INTEGER: "0" | ("-")? ["1"-"9"] (<DIGIT>)* >
}



SimpleNode Start()              : {/*@bgen(jjtree) PropertyList */
  ASTPropertyList jjtn000 = new ASTPropertyList(JJTPROPERTYLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PropertyList */
  try {
/*@egen*/
  (Expression() < NEWLINE>)+/*@bgen(jjtree)*/
                               {
                                 jjtree.closeNodeScope(jjtn000, true);
                                 jjtc000 = false;
                               }
/*@egen*/   { return jjtn000; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


void Expression()            : {/*@bgen(jjtree) Expression */
  ASTExpression jjtn000 = new ASTExpression(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ }
{/*@bgen(jjtree) Expression */
  try {
/*@egen*/
  Literal() <RELATIONALOP> Literal()/*@bgen(jjtree)*/
                                     {
                                       jjtree.closeNodeScope(jjtn000, true);
                                       jjtc000 = false;
                                     }
/*@egen*/ {jjtn000.value=t.image; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Literal()      : { }
{
   Num()
 | <RELATIONALOP> <LPAREN>Id()<RPAREN>
 |  Id()}


String Id()    : {/*@bgen(jjtree) ID */
                   ASTID jjtn000 = new ASTID(JJTID);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t;}
{/*@bgen(jjtree) ID */
 try {
/*@egen*/
 t = <THIS> <IDENTIFIER>/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                         }
/*@egen*/ { jjtn000.value = t.image;
						   return t.image;}
| t = <IDENTIFIER>/*@bgen(jjtree)*/
 {
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
 }
/*@egen*/
 {
   jjtn000.value = t.image;
   return t.image;
 }/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}


void Num()      : {/*@bgen(jjtree) Num */
                    ASTNum jjtn000 = new ASTNum(JJTNUM);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t;}
{/*@bgen(jjtree) Num */
 try {
/*@egen*/
 t = <INTEGER>/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/ { jjtn000.value=t.image;}/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}
